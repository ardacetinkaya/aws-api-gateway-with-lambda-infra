# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.

name: Docker build for v3 to Amazon ECR

on: 
  workflow_dispatch:
    inputs:
      tag:
        description: 'Default Tag for image'     
        required: true
        default: 'latest'
      use-fixed-tag:
        description: Default Latest Tag for image
        required: false
        type: boolean
  push:
    branches: [ "main" ]
    paths:
      - "src/functions/HelloLambda.v3/src/**"

env:
  AWS_REGION: eu-north-1                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: testartifacts           # set this to your Amazon ECR repository name

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      working-directory: ./src/functions/HelloLambda.v3/src/HelloLambda.v3
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: v3-${{ fromJSON('["${{ github.sha }}", "latest"]')[github.event.inputs.use-fixed-tag == 'true'] }}    # ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
